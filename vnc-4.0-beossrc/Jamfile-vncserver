## Haiku Generic Jamfile v1.0.1 ##
# Compile with: jam -da -q -fJambase -fJamfile-vncserver
# so that it uses our hacked up Jambase.  AGMS20130419

## Fill in this file to specify the project being created, and the referenced
## Jamfile-engine will do all of the hard work for you.  This handles both
## Intel and PowerPC builds of BeOS and Haiku.

## Application Specific Settings ---------------------------------------------

# Specify the name of the binary
#	If the name has spaces, you must quote it: "My App"
NAME = vncserver ;

# Specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
TYPE = APP ;

# Specify the application MIME signature, if you plan to use localization
# 	features. String format x-vnd.<VendorName>-<AppName> is recommended.
APP_MIME_SIG = application/x-vnd.agmsmith.vncserver ;

# Specify the source files to use
#	Full paths or paths relative to the Jamfile can be included.
# 	All files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this Jamfile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.
# Ex: SRCS = file1.cpp file2.cpp file3.cpp ;
SRCS = beosserver/ServerMain.cxx
    beosserver/FrameBufferBeOS.cxx
    beosserver/SDesktopBeOS.cxx
    network/TcpSocket.cxx
    rdr/Exception.cxx
    rdr/FdInStream.cxx
    rdr/FdOutStream.cxx
    rdr/HexInStream.cxx
    rdr/HexOutStream.cxx
    rdr/InStream.cxx
    rdr/NullOutStream.cxx
    rdr/RandomStream.cxx
    rdr/ZlibInStream.cxx
    rdr/ZlibOutStream.cxx

    rfb/Blacklist.cxx
    rfb/CConnection.cxx
    rfb/CMsgHandler.cxx
    rfb/CMsgReader.cxx
    rfb/CMsgReaderV3.cxx
    rfb/CMsgWriter.cxx
    rfb/CMsgWriterV3.cxx
    rfb/ComparingUpdateTracker.cxx
    rfb/Configuration.cxx
    rfb/ConnParams.cxx
    rfb/CSecurityVncAuth.cxx
    rfb/Cursor.cxx
    rfb/d3des.c
    rfb/Decoder.cxx
    rfb/Encoder.cxx
    rfb/encodings.cxx
    rfb/HextileDecoder.cxx
    rfb/HextileEncoder.cxx
    rfb/HTTPServer.cxx
    rfb/Logger.cxx
    rfb/Logger_file.cxx
    rfb/Logger_stdio.cxx
    rfb/LogWriter.cxx
    rfb/PixelBuffer.cxx
    rfb/PixelFormat.cxx
    rfb/RawDecoder.cxx
    rfb/RawEncoder.cxx
    rfb/Region.cxx
    rfb/RREDecoder.cxx
    rfb/RREEncoder.cxx
    rfb/SConnection.cxx
    rfb/secTypes.cxx
    rfb/ServerCore.cxx
    rfb/SMsgHandler.cxx
    rfb/SMsgReader.cxx
    rfb/SMsgReaderV3.cxx
    rfb/SMsgWriter.cxx
    rfb/SMsgWriterV3.cxx
    rfb/SSecurityFactoryStandard.cxx
    rfb/SSecurityVncAuth.cxx
    rfb/TransImageGetter.cxx
    rfb/UpdateTracker.cxx
    rfb/util.cxx
    rfb/vncAuth.cxx
    rfb/VNCSConnectionST.cxx
    rfb/VNCServerST.cxx
    rfb/ZRLEDecoder.cxx
    rfb/ZRLEEncoder.cxx
    Xregion/region.c ;

# Specify the resource files to use
#	Full path or a relative path to the resource file can be used.
RSRCS = beosserver/VNCServer.rsrc ;

# Specify additional libraries to link against
#	There are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#
#	-	for localization support add following libs:
#		locale localestub
#		
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
# Note that libnetwork.so in Haiku is called libnet.so in BeOS, so make a symbolic link
# in /boot/develop/lib/x86/ to give it both names when compiling under BeOS.  Same
# for libstdc++.r4.so and libstdc++.so being the same.
LIBS = be root network game z $(STDCPPLIBS) ;

# Specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the Jamfile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS =  ;

# Additional paths to look for system headers
#	These use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS = . ;

# Additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS =  ;

# Specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE = SOME ;

# Specify the codes for languages you are going to support in this 
# 	application. The default "en" one must be provided too. "jam catkeys"
# 	will recreate only locales/en.catkeys file. Use it as template for
# 	creating other languages catkeys. All localization files must be
# 	placed in "locales" sub-directory.
LOCALES =  ;

# Specify any preprocessor symbols to be defined.  The symbols will not
#	have their values set automatically; you must supply the value (if any)
#	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
#	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
#	would pass "-DDEBUG" on the compiler's command line.
DEFINES = HAVE_VSNPRINTF ;

# Specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS = ALL ;

# Specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS = TRUE ;

# Specify debug settings
#	if TRUE will allow application to be run from a source-level
#	debugger.  Note that this will disable all optimzation.
DEBUGGER =  ;

# Specify additional compiler flags for all files
COMPILER_FLAGS =  ;

# Specify additional linker flags
LINKER_FLAGS =  ;

# (for TYPE == DRIVER only) Specify desired location of driver in the /dev
#	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
#	instruct the driverinstall rule to place a symlink to your driver's binary in
#	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
#	/dev/video/usb when loaded. Default is "misc".
DRIVER_PATH =  ;

## Include the Jamfile-engine
include Jamfile-engine ;
